# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
# 현재의 파일이 ruby 인 것을 인식하도록 하는 호환코드
# 만약에 virtualbox guestad... /mnt 오류가 나면
# vagrant 2.3.7 삭제하고 vagrant 2.3.3 설치 후 아래 작업 수행
# vagrant plugin uninstall vagrant-vbguest
# vagrant plugin install vagrant-vbguest 


####################
### CentOS Nodes ###
####################


####################
###Ansible-Node01###
####################

# 처음에 버추얼박스 게스트 에디션 설치 안됐었음

# config.vm.define : vagrant 명령어를 사용할 때 이용될 tag

  config.vm.boot_timeout = 1800 # 30분 타임아웃 에러 안나게 하는 것
  config.vm.define "ansible-node01" do |cfg|
    cfg.vm.box = "centos/7"                 # 프로비저닝 할 운영체제를 선택  box가 aws에서 ami
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-Node01"   # 가상머신 이름 지정
    end
    cfg.vm.host_name = "ansible-node01"    # 가상 머신 Hostname 지정
    cfg.vm.network "private_network", ip: "192.168.56.11"  # 네트워크 지정
    cfg.vm.network "forwarded_port", guest: 22, host: 60011, auto_correct: true, id: "ssh"
    # 호스트와 사용하게 될 공유폴더 지정
    cfg.vm.synced_folder "..data", "/vagrant", disabled: true
    cfg.vm.provision "shell", path: "bash_ssh_conf_4_CentOS.sh"
    #cfg.vm.provision "shell", inline: "yum install epel-release -y"  #패키지 저장소 추가
    #cfg.vm.provision "shell", inline: "yum install ansible -y" 
    #cfg.vm.provision "file", source: "ansible_env_ready.yml", destination: "ansible_env_ready.yml"
    #cfg.vm.provision "shell", inline: "ansible-playbook ansible_env_ready.yml"
    # 뭔가를 추가하려면 프로비전 해야함
    # 앤서블에서 yml 파일을 실행하는 명령어는 ansible-playbook 이다
  end

####################
###Ansible-Node02###
####################


  #config.vm.boot_timeout = 1800 # 30분 타임아웃 에러 안나게 하는 것
  config.vm.define "ansible-node02" do |cfg|
    cfg.vm.box = "centos/7"                 # 프로비저닝 할 운영체제를 선택  box가 aws에서 ami
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-Node02"   # 가상머신 이름 지정
    end
    cfg.vm.host_name = "ansible-node02"    # 가상 머신 Hostname 지정
    cfg.vm.network "private_network", ip: "192.168.56.12"  # 네트워크 지정
    cfg.vm.network "forwarded_port", guest: 22, host: 60012, auto_correct: true, id: "ssh"
    cfg.vm.synced_folder "..data", "/vagrant", disabled: true
    cfg.vm.provision "shell", path: "bash_ssh_conf_4_CentOS.sh"
  end


####################
###Ansible-Node03###
####################


  #config.vm.boot_timeout = 1800 # 30분 타임아웃 에러 안나게 하는 것
  config.vm.define "ansible-node03" do |cfg|
    cfg.vm.box = "centos/7"                 # 프로비저닝 할 운영체제를 선택  box가 aws에서 ami
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-Node03"   # 가상머신 이름 지정
    end
    cfg.vm.host_name = "ansible-node03"    # 가상 머신 Hostname 지정
    cfg.vm.network "private_network", ip: "192.168.56.13"  # 네트워크 지정
    cfg.vm.network "forwarded_port", guest: 22, host: 60013, auto_correct: true, id: "ssh"
    cfg.vm.synced_folder "..data", "/vagrant", disabled: true
    cfg.vm.provision "shell", path: "bash_ssh_conf_4_CentOS.sh"
  end



####################
### Ubuntu Nodes ###
####################


####################
###Ansible-Node04###
####################

  config.vm.define "ansible-node04" do |cfg|
    cfg.vm.box = "ubuntu/trusty64"                 # 프로비저닝 할 운영체제를 선택  box가 aws에서 ami
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-Node04"   # 가상머신 이름 지정
    end
    cfg.vm.host_name = "ansible-node04"    # 가상 머신 Hostname 지정
    cfg.vm.network "private_network", ip: "192.168.56.14"  # 네트워크 지정
    cfg.vm.network "forwarded_port", guest: 22, host: 60014, auto_correct: true, id: "ssh"
    cfg.vm.synced_folder "..data", "/vagrant", disabled: true
  end

####################
###Ansible-Node05###
####################

  config.vm.define "ansible-node05" do |cfg|
    cfg.vm.box = "ubuntu/trusty64"                 # 프로비저닝 할 운영체제를 선택  box가 aws에서 ami
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-Node05"   # 가상머신 이름 지정
    end
    cfg.vm.host_name = "ansible-node05"    # 가상 머신 Hostname 지정
    cfg.vm.network "private_network", ip: "192.168.56.15"  # 네트워크 지정
    cfg.vm.network "forwarded_port", guest: 22, host: 60015, auto_correct: true, id: "ssh"
    cfg.vm.synced_folder "..data", "/vagrant", disabled: true
  end


####################
###Ansible-Node06###
####################


  config.vm.define "ansible-node06" do |cfg|
    cfg.vm.box = "ubuntu/trusty64"                 # 프로비저닝 할 운영체제를 선택  box가 aws에서 ami
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-Node06"   # 가상머신 이름 지정
    end
    cfg.vm.host_name = "ansible-node06"    # 가상 머신 Hostname 지정
    cfg.vm.network "private_network", ip: "192.168.56.16"  # 네트워크 지정
    cfg.vm.network "forwarded_port", guest: 22, host: 60016, auto_correct: true, id: "ssh"
    cfg.vm.synced_folder "..data", "/vagrant", disabled: true
  end


####################
###Ansible Server###
####################


  #config.vm.boot_timeout = 1800 # 30분 타임아웃 에러 안나게 하는 것
  config.vm.define "ansible-server" do |cfg|
    cfg.vm.box = "centos/7"                 
    cfg.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-Server"   
    end
    cfg.vm.host_name = "ansible-server"    
    cfg.vm.network "private_network", ip: "192.168.56.10"  
    cfg.vm.network "forwarded_port", guest: 22, host: 60010, auto_correct: true, id: "ssh"
    cfg.vm.synced_folder "..data", "/vagrant", disabled: true
    cfg.vm.provision "shell", inline: "yum install epel-release -y"  
    cfg.vm.provision "shell", inline: "yum install ansible -y" 
    cfg.vm.provision "file", source: "ansible_env_ready.yml", destination: "ansible_env_ready.yml"
    cfg.vm.provision "shell", inline: "ansible-playbook ansible_env_ready.yml"
    cfg.vm.provision "shell", path: "add_ssh_auth.sh", privileged: false
  end
end

# 가상환경에 직접 접속하지 않고 설정을 하려고 지금 이러고 있는 거다
# 한줄짜리 명령어는 inline으로 명령을 줬다
# sh 파일은 명령 안에 있는 명령 자체를 날려버리고
# yml 파일은 파일을 윈도에서 앤서블 서버로 복사한 다음 ansible-playbook으로 앤서블 서버에서 실행
# 왜냐하면 앤서블 프로그램이 리눅스에 설치되어 있고 리눅스에서만 앤서블 프로그램이 돌아가기 때문에
# env_ready에 sshpass 설치 명령이 기입되어 있으므로 ass_ssh_auth.sh 명령은 그 다음의 순서가 되어야
# 에러가 나지 않는다.
# 프로비저닝도 단순하게 때려 넣는게 아니라 순서를 잘 잡아줘야 한다
# 

# 여기까지 앤서블 환경 잡아주는 것 (6월 27일 화요일 오전 11시 30분)


#기본적으로 쓰는 명령어
# vagrant ssh 접속 윈도우 터미널에서 vagrant 마지막 폴더 까지 간 다음 vagrant ssh ansible-server 입력
# 앤서블 서버에서 각 노드에 ping 보내기 ansible all -m ping -k
